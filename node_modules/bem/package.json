{
  "name": "bem",
  "description": "BEM Tools",
  "version": "0.5.10",
  "homepage": "http://github.com/bem/bem-tools",
  "author": {
    "name": "Sergey Berezhnoy",
    "email": "veged@mail.ru",
    "url": "http://github.com/veged"
  },
  "maintainers": [
    {
      "name": "Sergey Berezhnoy",
      "email": "veged@mail.ru",
      "url": "http://github.com/veged"
    },
    {
      "name": "Sergey Belov",
      "email": "peimei@ya.ru",
      "url": "http://github.com/arikon"
    }
  ],
  "contributors": [
    {
      "name": "Sergey Berezhnoy",
      "email": "veged@mail.ru",
      "url": "http://github.com/veged"
    },
    {
      "name": "Sergey Belov",
      "email": "peimei@ya.ru",
      "url": "http://github.com/arikon"
    },
    {
      "name": "Varvara Stepanova",
      "email": "toivonen@toivonen.ru",
      "url": "http://github.com/toivonen"
    },
    {
      "name": "Vladimir Alaev",
      "email": "scf2k4@gmail.com",
      "url": "http://github.com/scf2k"
    }
  ],
  "bugs": {
    "url": "http://github.com/bem/bem-tools/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bem/bem-tools.git"
  },
  "directories": {
    "lib": "./lib"
  },
  "bin": {
    "bem": "./bin/bem"
  },
  "main": "./lib/index",
  "dependencies": {
    "coa": "~0.3.5",
    "q": "~0.8.5",
    "qq": "~0.3.4",
    "q-fs": "0.1",
    "q-http": "~0.1.13",
    "mime": "~1.2.5",
    "underscore": "~1.3.1",
    "inherit": "~1.0.0",
    "xjst": "0.2.21",
    "ometajs": "~2.1.10",
    "borschik": "~0.0.10",
    "apw": "~0.3.4",
    "winston": ">= 0.5.0",
    "memorystream": ">= 0.1.1",
    "csso": "~1.2.14",
    "uglify-js": "~1.3.0"
  },
  "devDependencies": {
    "mocha": "~1.0.0",
    "chai": "~1.0.3"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "npm2debian": {
    "bash-completion": {
      "bem": {
        "script": "./bin/bem completion"
      }
    }
  },
  "licenses": [
    {
      "type": "AS IS"
    }
  ],
  "preferGlobal": true,
  "publishConfig": {
    "tag": "unstable"
  },
  "optionalDependencies": {},
  "readme": "# BEM Tools [![Build Status](https://secure.travis-ci.org/bem/bem-tools.png?branch=nodejs)](http://travis-ci.org/bem/bem-tools)\nToolkit to work with files based on [BEM methodology](http://bem.github.com/bem-method/pages/beginning/beginning.en.html).\n\n## Installation\nYou need [NodeJS 0.4.x](http://nodejs.org/) or later and [npm 1.x](http://npmjs.org/).\n\n * Install [bem-tools](https://github.com/bem/bem-tools)\n\n        sudo npm -g install bem\n\n * Use this command [bem-tools](https://github.com/bem/bem-tools) to install the development version\n\n        sudo npm -g install bem@unstable\n\n### bem-bl\n\nIf you are going to use `bem` with\n[bem-bl](https://github.com/bem/bem-bl) block library, you should also install\n[XJST](https://github.com/veged/xjst) and [OmetaJS](https://github.com/veged/ometajs).\n\n    sudo npm -g install xjst ometajs\n\n## Usage\nGet the list of commands with `bem --help`.\nTo read about commands and subcommands use `bem COMMAND --help` or `bem COMMAND SUBCOMMAND --help`.\n\n### Shell completion\n\n#### bash\n\nTo make completions for bem-tools available in your bash, run following\ncommand (ensure that you have bash-completion installed, first). Run this\n\n    bem completion > /path/to/etc/bash_completion.d/bem\n\nand restart bash.\n\nIf you aren't using `bash-completion`, you can add `bem completion` to your `.bashrc`:\n\n    bem completion >> ~/.bashrc\n\n#### zsh\n\nIf you use `zsh`, you can add `bem completion` to your `.zshrc`:\n\n    bem completion >> ~/.zshrc\n\nthen restart.\n\n### Commands\n#### bem create\n\nYou can create following entities using `bem create`:\n\n * levels of defenition\n * blocks\n * elements\n * modifiers\n\n##### Level of defenition\n\nLevel of defenition is a directory that holds blocks and an utility directiry `.bem`.\n\nA `.bem` directory holds configuration of a current level:\n\n * naming convention\n * links to the technologies\n\nAn example of technologies' links (this is `blocks-desktop` level of\n`bem-bl` block library):\n\n    https://github.com/bem/bem-bl/blob/master/blocks-common/.bem/level.js\n\n###### Create new level of defenition named `blocks` under current directory:\n\n    bem create level blocks\n\n###### Create a level for pages\n\nIn `bem-tools` terms pages are blocks as well and a directory which holds pages is a level of\ndefenition itself. To create such a directory run this:\n\n    bem create level pages\n\n###### Create a level based on an existing one\n\n`bem create level` allows to use an existing level as a prototype for a level it creates.\n\n    bem create level --level bem-bl/blocks-desktop blocks\n\n##### Block\n\nBlock is a bunch of files in different technologies that hold block's implementation.\n\n###### Create a new block\n\n    bem create block b-my-block\n\nBy default, a block has several techs: (`bemhtml`, `css`, `js`).\n\n###### Create a new block using concrete tech\n\nFlags -t (-T) are to create files of technologies you need:\n\n    bem create block -t deps.js b-my-block\n        // Creates a block implementation in deps.js technology, ecxept of default techs.\n\n    bem create block -T css b-my-block\n        // Creates only CSS technology for a block\n\n    bem create block -T bem-bl/blocks-desktop/i-bem/bem/techs/bemhtml.js b-my-block\n        // -T flag is useful when you need to add a new tech to the block existed\n\nThe value of this flag may be either tech's name (e.g `css`) or a path to tech module.\n\nTech names may be listed in `.bem/level.js` file of a level.\nE.g., https://github.com/bem/bem-bl/blob/master/blocks-common/.bem/level.js\n\nYou can find the examples of tech modules in the repo:\n\n    https://github.com/bem/bem-tools/tree/nodejs/lib/techs\n\n###### Create element\n\nCreate element named `elem` for block `b-my-block`\n\n    bem create elem -b b-my-block elem\n\n###### Create modifier of block or element\n\nCreate modifier named `mod` for block `b-my-block`\n\n    bem create mod -b b-my-block mod\n\nCreate modifier named `mod` having value `val` for block `b-my-block`\n\n    bem create mod -b b-my-block mod -v val\n\nCreate modifier named `mod` for element `elem` of block `b-my-block`\n\n    bem create mod -b b-my-block -e elem mod\n\nCreate modifier named  `mod` having value `val` for element `elem` of block `b-my-block`\n\n    bem create mod -b b-my-block -e elem mod -v val\n\n###### Create any BEM entity using `bem create` command only\n\nYou can create any BEM entities or bunches of them using `bem create` command.\n\nCreate blocks named `b-block1` and `b-block2`\n\n    bem create -b b-block1 -b b-block2\n\nCreate elements named `elem1` and `elem2` for block `b-block`\n\n    bem create -b b-block -e elem1 -e elem2\n\nCreate modifier names `mod` of block `b-block`\n\n    bem create -b b-block -m mod\n\nCreate modifier named `mod` of block `b-block` having values `val1` and `val2`\n\n    bem create -b b-block -m mod -v val1 -v val2\n\nCreate modifier named `mod` for element `elem` of block `b-block`\n\n    bem create -b b-block -e elem -m mod\n\nCreate modifier named `mod` having values `val1` and `val2` for element `elem` of block `b-block`\n\n    bem create -b b-block -e elem -m mod -v val1 -v val2\n\n#### bem build\n\n`bem build` command builds page files in different techs, according to a page declaration.\n\n##### Create bemdecl.js file from page's bemjson\n\n    bem build \\\n        -l bem-bl/blocks-common -l bem-bl/blocks-desktop \\\n        -l blocks -l pages/index/blocks \\\n        -d pages/index/index.bemjson.js -t bemdecl.js \\\n        -o pages/index -n index\n\nYou can use either tech's name or a path to its module as a value of -t flag. This\nmodule says how to build a final file from a declaration.\n\nE.g., this is a module for `deps.js`: https://github.com/bem/bem-tools/blob/nodejs/lib/techs/deps.js.js\n\n##### Create deps.js file from bemdecl.js\n\n    bem build \\\n        -l bem-bl/blocks-common -l bem-bl/blocks-desktop \\\n        -l blocks -l pages/index/blocks \\\n        -d pages/index/index.bemdecl.js -t deps.js \\\n        -o pages/index -n index\n\n###### Create js and css files for a page from deps.js\n\n    bem build \\\n        -l bem-bl/blocks-common -l bem-bl/blocks-desktop \\\n        -l blocks -l pages/index/blocks \\\n        -d pages/index/index.deps.js -t css \\\n        -o pages/index -n index\n\n    bem build \\\n        -l bem-bl/blocks-common -l bem-bl/blocks-desktop \\\n        -l blocks -l pages/index/blocks \\\n        -d pages/index/index.deps.js -t js \\\n        -o pages/index -n index\n\n###### Create bemhtml.js template for a page from deps.js\n\n    bem build \\\n        -l bem-bl/blocks-common -l bem-bl/blocks-desktop \\\n        -l blocks -l pages/index/blocks \\\n        -d pages/index/index.bemhtml.js \\\n        -t bem-bl/blocks-desktop/i-bem/bem/techs/bemhtml.js \\\n        -o pages/index -n index\n\nThere is an example how pages are built using `bem build` in our test project that uses\n`bem-bl` block library: https://github.com/toivonen/bem-bl-test/blob/master/GNUmakefile\n\n#### bem decl\n\n`bem decl` is to work with declaration files. Thus,\n\n * to merge two or more decls into one\n * «subtract» decls\n\nAll subcommands of `bem decl` can take either bemdecl.js or deps.js as input declaration formats.\nas input declaration (via `-d` flag).\n\nOuput data (`-o` flag) is always in `deps.js` format.\n\n##### bem decl merge\n\n`bem decl merge` is to merge two or more decls into one. It is useful if you need, for example, to build\none file for several pages.\n\n###### Create a decl for all the pages\n\n    bem decl merge \\\n        -d pages/index/index.deps.js \\\n        -d pages/about/about.deps.js \\\n        -d pages/search/search.deps.js \\\n        -o pages/common/common.deps.js\n\n##### bem decl subtract\n\n`bem decl subtract` is to «subtract» all next decls from the first one.\nYou may use it to create a bundle that you request by application.\n\n###### Create a decl for a \"heavy\" block requested by application\n\n    bem decl subtract \\\n        -d bundles/heavy-block/heavy-block.deps.js \\\n        -d pages/common/common.deps.js \\\n        -o bundles/heavy-block/heavy-block.bundle.js\n\n#### bem server\n\n`bem server` starts a web server which serves static files, dynamic html generated form the BEMHTML and BEMJSON on the\nfly, and pipes js and css files through borschik.\n\nBy default document root is the current directory. You can change that with the `--project` (`-r`) parameter. So if you have\n`pages/about/main.css` file in the project folder it will be accessible with a browser using\n[http://localhost:8080/pages/about/main.css](http://localhost:8080/pages/about/main.css) URL.\n\nThe default TCP port the server is listening to is 8080. You can change it with the `--port` (`-p`) parameter.\n\nWhen the server gets a request for some `*.html` file it will look for appropriate BEMJSON and BEMHTML files, apply one\nto another and return the result if both files do exist. The contents of the `*.html` file will be returned otherwise.\n\nWhen requested URL corresponds to a directory server checks for index.html file in it and returns the content. If file is\nnot found, `index.bemhtml.js` and `index.bemjson.js` are checked for existance and the result of the template application is\nreturned. Otherwise the directory listing is returned.\n\n### Tech modules\n\n#### API\n\nLook for a documentation in source [lib/tech.js](https://github.com/bem/bem-tools/blob/nodejs/lib/tech.js).\n\n#### Creating tech module\n\nThere are three ways to write a tech module: very simple, simple and advanced.\n\nWhatever manner you use you can get a tech object from `this`. Any base class is\navailable from `this.__base(...)`. Thanks to [inherit](https://github.com/dfilatov/node-inherit)\nmodule that organizes inheritance here.\n\n##### Very simple way\n\nYou only need to create regular CommonJS module and export some of its\nfunctions to redefine them. By default all functions from the base class are put\nin `Tech` module [lib/tech.js](https://github.com/bem/bem-tools/blob/nodejs/lib/tech.js).\n\n##### Simple way\n\nBesides function, you can also export `baseTechPath` variable to define an\nabsolute path to a tech module you are extending. By default you are\nextending `Tech` class.\n\nFor example:\n\n```js\n\nexports.baseTechPath = require.resolve('bem/lib/techs/css');\n\n```\n\n##### Advanced way\n\nIf you need a total control, you can create a module that exports\nthe whole `Tech` class.\n\n```js\nvar INHERIT = require('inherit'),\n    BaseTech = require('bem/lib/tech').Tech;\n\nexports.Tech = INHERIT(BaseTech, {\n\n    create: function(prefix, vars, force) {\n        // do some creation work\n    },\n\n    build: function(prefixes, outputDir, outputName) {\n        // organize own build process\n    }\n\n});\n```\n\nWhen you need to base your tech on an existing one written in a simple way use\n`getTechClass()` function from `bem/lib/tech` module\nto get its class.\n\n```js\nvar INHERIT = require('inherit'),\n    getTechClass = require('bem/lib/tech').getTechClass,\n    BaseTech = getTechClass(require.resolve('path/to/tech/module'));\n\nexports.Tech = INHERIT(BaseTech, {\n\n    // your overrides go here\n\n});\n```\n\n##### Examples of tech modules\n\n * [bem-tools/lib/techs/](https://github.com/bem/bem-tools/tree/nodejs/lib/techs)\n * [bem-bl/blocks-common/i-bem/bem/techs/](https://github.com/bem/bem-bl/tree/master/blocks-common/i-bem/bem/techs)\n\n### API usage\n\nStarting from 0.2.0 version it is possible to use `bem-tools` from API.\n\n`bem` module exports the object of a command that has an `api` property.\nIt is to use in this way:\n\n```js\nvar Q = require('q'),\n    BEM = require('bem').api,\n\n    techs = ['css', 'js'],\n    blocks = ['b-block1', 'b-block2'];\n\nQ.when(BEM.create.block({ forceTech: techs }, { names: blocks }), function() {\n    console.log('Create blocks: %s', blocks.join(', '));\n});\n```\n\nThe example above shows that you can use all the commands (including subcommands).\n\nA command accepts two args:\n\n * **Object** `opts` command options\n * **Object** `args` command arguments\n\nIt returns an object of `Q.promise` type.\n\n#### BEM.create\n\nCommands to create BEM entities.\n\n##### BEM.create.level()\n\nCreates a level of defenition.\n\n###### Options\n\n * **String** `outputDir` a directory of output (current directory by default)\n * **String** `level` a «prototype» of the level\n * **Boolean** `force` key to force level's creating if it already exists\n\n###### Arguments\n\n * **Array** `names` Namef of levels you are creating\n\n###### Example\n\n```js\nvar PATH = require('path'),\n    Q = require('q'),\n    BEM = require('bem').api,\n\n    outputDir = PATH.join(__dirname, 'levels'),\n    levels = ['blocks-common', 'blocks-desktop'];\n\nQ.when(BEM.create.level({ outputDir: outputDir }, { names: levels }), function() {\n    console.log('Create levels %s at %s', levels.join(', '), outputDir);\n});\n```\n\n##### BEM.create.block()\n\nCreates a block.\n\n###### Options\n\n * **String** `levelDir` A directory of block's level. (Current directory by default)\n * **Array** `addTech` Add the techs listed\n * **Array** `forceTech` Use these techs only\n * **Array** `noTech` Exclude these techs\n * **Boolean** `force` Force files creating\n\n###### Arguments\n\n * **Array** `names` List of block names\n\n###### Example\n\n```js\nvar Q = require('q'),\n    BEM = require('bem').api,\n\n    addTechs = ['bemhtml'],\n    blocks = ['b-header'];\n\nQ.when(BEM.create.block({ addTech: addTechs }, { names: blocks }), function() {\n    console.log('Create blocks: %s', blocks.join(', '));\n});\n```\n\n##### BEM.create.elem()\n\nCreating an element.\n\n###### Options\n\n * **String** `levelDir` A directory of level. (Current directory by default)\n * **String** `blockName` A name of element's block (required)\n * **Array** `addTech` Add the techs listed\n * **Array** `forceTech` Use only the techs listed\n * **Array** `noTech` Exclude the techs listed\n * **Boolean** `force` Force creating element's files (to rewrite them)\n\n###### Arguments\n\n * **Array** `names` List of element names\n\n###### Example\n\n```js\nvar Q = require('q'),\n    BEM = require('bem').api,\n\n    addTechs = ['bemhtml', 'title.txt'],\n    block = 'b-header',\n    elems = ['logo'];\n\nQ.when(BEM.create.elem({ addTech: addTechs, blockName: block }, { names: elems }), function() {\n    console.log('Create elems %s of block %s', elems.join(', '), block);\n});\n```\n\n##### BEM.create.mod()\n\nCreating a modifier for a block or an element.\n\n###### Options\n\n * **String** `levelDir` Level directory (current directory by default)\n * **String** `blockName` Block name of this modifier (required)\n * **String** `elemName` Element name\n * **Array** `modVal` Modifier vaue\n * **Array** `addTech` Ad the techs listed\n * **Array** `forceTech` Use only the techs listed\n * **Array** `noTech` Exclude the techs listed\n * **Boolean** `force` Force creating modifier files (rewrite)\n\n###### Arguments\n\n * **Array** `names` List of modifier\n\n###### Example\n\n```js\nvar Q = require('q'),\n    BEM = require('bem').api,\n\n    forceTechs = ['css'],\n    block = 'b-header',\n    elem = 'logo',\n    mods = ['lang'],\n    vals = ['ru', 'en'];\n\nQ.when(BEM.create.mod({ forceTechs: forceTechs, blockName: block, modVal: vals }, { names: mods }), function() {\n    console.log('Create mod %s of block %s with vals %s', elems.join(', '), block, vals.join(', '));\n});\n\nQ.when(BEM.create.mod({ forceTechs: forceTechs, blockName: block, elemName: elem, modVal: vals }, { names: elems }), function() {\n    console.log('Create mod %s of elem %s of block %s with vals %s', elems.join(', '), elem, block, vals.join(', '));\n});\n```\n\n#### BEM.build()\n\nBuild files from blocks.\n\n###### Options\n\n * **String** `outputDir` An output directory (current directory by default)\n * **String** `outputName` A filename (its prefix) for output\n * **String** `declaration` A filename of input declaration (required)\n * **Array** `level` List of levels to use\n * **Array** `tech` List of techs to build\n\n###### Example\n\n```js\nvar Q = require('q'),\n    BEM = require('bem').api,\n\n    decl = 'page.deps.js',\n    outputDir = 'build',\n    outputName = 'page',\n    levels = ['blocks-common', 'blocks-desktop'],\n    techs = ['css', 'js'];\n\nQ.when(\n    BEM.build({\n        outputDir: outputDir,\n        outputName: outputName,\n        declaration: decl,\n        level: levels,\n        tech: techs\n    }),\n    function() {\n        console.log('Finished build of techs %s for levels %s. Result in %s/%s.* files.',\n            techs.join(', '), levels.join(', '), outputDir, outputName);\n    }\n);\n```\n\n#### BEM.decl\n\nCommands to work with declarations.\n\n##### BEM.decl.merge()\n\nMerging two or more declarations into one.\n\n###### Options\n\n * **String** `output` A file for output result. By default output is in STDOUT\n * **Array** `declaration` List of filenames for declarations (required)\n\n##### BEM.decl.subtract()\n\nSubtracting the next declarations from the first one.\n\n###### Options\n\n * **String** `output` A file for output result. By default output is in STDOUT\n * **Array** `declaration` List of filenames for declarations (required)\n\n<!-- Yandex.Metrika counter -->\n<img src=\"//mc.yandex.ru/watch/12831025\" style=\"position:absolute; left:-9999px;\" alt=\"\" />\n<!-- /Yandex.Metrika counter -->\n",
  "_id": "bem@0.5.10",
  "_from": "bem@~0.5.9"
}

{
  "name": "qq",
  "version": "0.3.5",
  "description": "Out of service - A heavy-weight library for promises, based on Q",
  "homepage": "http://github.com/kriskowal/qq/",
  "author": {
    "name": "Kris Kowal",
    "email": "kris@cixar.com",
    "url": "http://github.com/kriskowal/"
  },
  "credits": [
    "Mark S. Miller, Google Inc.",
    "Edud (Udi) Shapiro"
  ],
  "bugs": {
    "mail": "kris@cixar.com",
    "url": "http://github.com/kriskowal/qq/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/kriskowal/qq/raw/master/LICENSE"
    }
  ],
  "main": "qq.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/kriskowal/qq.git"
  },
  "engines": {
    "node": ">=0.2.0",
    "teleport": ">=0.2.0"
  },
  "dependencies": {
    "q": "0.8.4"
  },
  "devDependencies": {
    "test": ">=0.1.0"
  },
  "readme": "Provides heavy-weight extensions to the Q API for using\nasynchronous promises, both in the browser and in CommonJS\nmodule systems like NodeJS.\n\n\nThe Q utility module exports all of the Q module's API but\nadditionally provides the following functions.\n\n    var Q = require(\"qq\");\n\n\nstep(...functions)\n\n    Calls each step function serially, proceeding only when\n    the promise returned by the previous step is deeply\n    resolved (see: `deep`), and passes the resolution of the\n    previous step into the argument or arguments of the\n    subsequent step.\n\n    If a step accepts more than one argument, the resolution\n    of the previous step is treated as an array and expanded\n    into the step's respective arguments.\n\n    `step` returns a promise for the value eventually\n    returned by the last step.\n\n\ndelay(timeout, eventually_opt)\n\n    Returns a promise for the eventual value after `timeout`\n    miliseconds have elapsed.  `eventually` may be omitted,\n    in which case the promise will be resolved to\n    `undefined`.  If `eventually` is a function, progress\n    will be made by calling that function and resolving to\n    the returned value.  Otherwise, `eventually` is treated\n    as a literal value and resolves the returned promise\n    directly.\n\n\nshallow(object)\n\n    Takes any value and returns a promise for the\n    corresponding value after all of its properties have\n    been resolved.  For arrays, this means that the\n    resolution is a new array with the corresponding values\n    for each respective promise of the original array, and\n    for objects, a new object with the corresponding values\n    for each property.\n\n\ndeep(object)\n\n    Takes any value and returns a promise for the\n    corresponding value after all of its properties have\n    been deeply resolved.  Any array or object in the\n    transitive properties of the given value will be\n    replaced with a new array or object where all of the\n    owned properties have been replaced with their\n    resolution.\n\n\nreduceLeft(values, callback, basis, this)\nreduceRight(values, callback, basis, this)\nreduce(values, callback, basis, this)\n\n    The reduce methods all have the signature of `reduce` on\n    an ECMAScript 5 `Array`, but handle the cases where a\n    value is a promise and when the return value of the\n    accumulator is a promise.  In these cases, each reducer\n    guarantees that progress will be made in a particular\n    order.\n\n    `reduceLeft` guarantees that the callback will be called\n    on each value and accumulation from left to right after\n    all previous values and accumulations are fully\n    resolved.\n\n    `reduceRight` works similarly from right to left.\n\n    `reduce` is opportunistic and will attempt to accumulate\n    the resolution of any previous resolutions.  This is\n    useful when the accumulation function is associative.\n\n\nThe `qq` module provides a `Queue` object where\ninfinite promises for values can be dequeued before they are\nenqueued.\n\nput(value)\n\n    Places a value on the queue, resolving the next gotten\n    promise in order.\n\nget()\n\n    Returns a promise for the next value from the queue.  If\n    more values have been enqueued than dequeued, this value\n    will already be resolved.\n\nclose(reason_opt)\n\n    Causes all promises dequeued after all already enqueued\n    values have been depleted will be rejected for the given\n    reason.\n\nclosed\n\n    A promise that, when resolved, indicates that all\n    enqueued values from before the call to `close` have\n    been dequeued.\n\n\nCopyright 2009-2011 Kristopher Michael Kowal\nMIT License (enclosed)\n\n",
  "_id": "qq@0.3.5",
  "_from": "qq@~0.3.4"
}

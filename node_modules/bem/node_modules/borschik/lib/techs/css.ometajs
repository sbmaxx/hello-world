var cssptt = require('cssp/src/cssptt'),
    CSSParser = cssptt.CSSParser,
    CSSTransformer = cssptt.CSSTransformer,
    CSSTranslator = cssptt.CSSTranslator;

ometa BorschikCSSParser <: CSSParser {

}

BorschikCSSParser.parse = function(content) {
    return this.matchAll(new String(content), 'stylesheet');
}


ometa BorschikCSSChilds <: CSSTransformer {

    atrules = [#atrules
            [#atkeyword [#ident #import]]
            any
            [#uri [(#string | #raw) :uri]]
        ] -> [#borschik,
            this._file.child(
                'include',
                uri.replace(/["']/g, ''))]
        | ^atrules,

    uri = [#uri [(#string | #raw) :uri ?(!uri.replace(/["']/g, '').match(/^((\w+:)?\/\/|data\:)/))]] -> [#uri, [#borschik,
            this._file.child(
                'link',
                uri.replace(/["']/g, ''))]]
        | ^uri,

    raw = [#raw [
            ``progid:DXImageTransform.Microsoft.AlphaImageLoader''
            '('
            <(~')' char)+>:c_
            AlphaImageLoaderAttrs(c_):c
            ')'
        ]] -> [#AlphaImageLoader, c] | ^raw,

    AlphaImageLoaderAttrs = [listOf(#AlphaImageLoaderAttr, ','):c] -> [#AlphaImageLoaderAttrs, c],
    AlphaImageLoaderAttr = ``src'':n '=' <(~',' char)+>:v -> [#AlphaImageLoaderAttr, n,
        [#borschik,
            this._file.child(
                'link',
                v.replace(/["']/g, ''))]]
        | <letter+>:n '=' <(~',' char)+>:v -> [#AlphaImageLoaderAttr, n, [#raw, v]]

}

BorschikCSSChilds.childs = function(file, content) {
    return this.match(content, 'stylesheet');
}


ometa BorschikCSSTranslator <: CSSTranslator {

    any = borschik | AlphaImageLoader | ^any,

    borschik = [#borschik :f] -> f.process(this._path),

    AlphaImageLoader = [#AlphaImageLoader AlphaImageLoaderAttrs:c] -> ('progid:DXImageTransform.Microsoft.AlphaImageLoader(' + c + ')'),
    AlphaImageLoaderAttrs = [#AlphaImageLoaderAttrs [AlphaImageLoaderAttr+:as]] -> as.join(','),
    AlphaImageLoaderAttr = [#AlphaImageLoaderAttr :n any:v] -> (n + '=' + v)

}

BorschikCSSTranslator.translate = function(path, content) {
    return this.match(content, 'stylesheet');
}
